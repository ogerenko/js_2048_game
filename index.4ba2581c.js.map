{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.initialState = initialState;\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.boardScore = 0;\n        this.currentStatus = \"idle\";\n        this.isAbleToMove = true;\n        this.isGameActive = false;\n        this.isGameWon = false;\n        this.isGameLost = false;\n    }\n    moveLeft() {\n        if (this.isGameActive) this.moveTo(\"left\");\n    }\n    moveRight() {\n        if (this.isGameActive) this.moveTo(\"right\");\n    }\n    moveUp() {\n        if (this.isGameActive) this.moveTo(\"up\");\n    }\n    moveDown() {\n        if (this.isGameActive) this.moveTo(\"down\");\n    }\n    getScore() {\n        return this.boardScore;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        switch(true){\n            case this.isGameWon:\n                this.currentStatus = \"win\";\n                break;\n            case this.isGameLost:\n                this.currentStatus = \"lose\";\n                break;\n            case this.isGameActive:\n                this.currentStatus = \"playing\";\n                break;\n            default:\n                this.currentStatus = \"idle\";\n                break;\n        }\n        return this.currentStatus;\n    }\n    start() {\n        this.isGameActive = true;\n        this.placeNewCell();\n        this.placeNewCell();\n    }\n    restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.boardScore = 0;\n        this.isGameActive = true;\n        this.isGameWon = false;\n        this.isGameLost = false;\n        this.placeNewCell();\n        this.placeNewCell();\n    }\n    placeNewCell() {\n        let randomRow, randomColumn;\n        do {\n            randomRow = Math.floor(Math.random() * 4);\n            randomColumn = Math.floor(Math.random() * 4);\n        }while (this.board[randomRow][randomColumn] !== 0);\n        this.board[randomRow][randomColumn] = this.createCell();\n    }\n    createCell() {\n        const randomValue = Math.random();\n        return randomValue < 0.1 ? 4 : 2;\n    }\n    moveTo(direction) {\n        if (!this.isGameActive) return;\n        const numColumns = this.board[0].length;\n        let currentTable = JSON.parse(JSON.stringify(this.board));\n        let addScore = 0;\n        const transpose = (table)=>{\n            return table[0].map((_, colIndex)=>table.map((row)=>row[colIndex]));\n        };\n        const reverseRow = (table)=>{\n            return table.map((row)=>row.slice().reverse());\n        };\n        const moveTable = (table)=>{\n            const newTable = table.map((row)=>{\n                let newRow = row.filter((num)=>num !== 0);\n                const zerosToAdd = numColumns - newRow.length;\n                newRow = [\n                    ...Array(zerosToAdd).fill(0),\n                    ...newRow\n                ];\n                for(let i = newRow.length; i >= 0; i--)if (newRow[i - 1] === newRow[i]) {\n                    newRow[i - 1] *= 2;\n                    newRow[i] = 0;\n                    addScore += newRow[i - 1];\n                    i--;\n                }\n                newRow = newRow.filter((num)=>num !== 0);\n                const zerosToAddEnd = numColumns - newRow.length;\n                newRow = [\n                    ...Array(zerosToAddEnd).fill(0),\n                    ...newRow\n                ];\n                return newRow;\n            });\n            return newTable;\n        };\n        const isGameOver = ()=>{\n            const GAME_FIELD = 4;\n            for(let i = 0; i < GAME_FIELD; i++)for(let j = 0; j < GAME_FIELD; j++){\n                if (this.board[i][j] === 0) return false;\n            }\n            for(let i = 0; i < GAME_FIELD; i++)for(let j = 0; j < GAME_FIELD; j++){\n                if (j < GAME_FIELD - 1 && this.board[i][j] === this.board[i][j + 1]) return false;\n                if (i < GAME_FIELD - 1 && this.board[i][j] === this.board[i + 1][j]) return false;\n            }\n            this.isGameActive = false;\n            this.isGameLost = true;\n            return true;\n        };\n        const makeMove = (moveToSide)=>{\n            if (JSON.stringify(moveToSide) === JSON.stringify(currentTable)) return;\n            this.board = moveToSide;\n            currentTable = moveToSide;\n            if (this.board.flat().includes(2048)) {\n                this.isGameActive = false;\n                this.isGameWon = true;\n                this.getStatus();\n                return;\n            }\n            this.placeNewCell();\n            if (isGameOver()) this.isAbleToMove = false;\n        };\n        switch(direction){\n            case \"up\":\n                const moveUp = transpose(reverseRow(moveTable(reverseRow(transpose(currentTable)))));\n                makeMove(moveUp);\n                this.boardScore += addScore;\n                break;\n            case \"down\":\n                const moveDown = transpose(moveTable(transpose(currentTable)));\n                makeMove(moveDown);\n                this.boardScore += addScore;\n                break;\n            case \"right\":\n                const moveRight = moveTable(currentTable);\n                makeMove(moveRight);\n                this.boardScore += addScore;\n                break;\n            case \"left\":\n                const moveLeft = reverseRow(moveTable(reverseRow(currentTable)));\n                makeMove(moveLeft);\n                this.boardScore += addScore;\n                break;\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$container = document.querySelector(\".container\");\nconst $09e991522ca7e64e$var$button = $09e991522ca7e64e$var$container.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = $09e991522ca7e64e$var$container.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = $09e991522ca7e64e$var$container.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = $09e991522ca7e64e$var$container.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$scoreInfo = $09e991522ca7e64e$var$container.querySelector(\".game-score\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.textContent === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n    } else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$updateUI();\n});\ndocument.addEventListener(\"keydown\", (keyboard)=>{\n    switch(keyboard.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$updateUI();\n});\nfunction $09e991522ca7e64e$var$updateUI() {\n    const gameState = $09e991522ca7e64e$var$game.getState().flat();\n    const fieldCells = $09e991522ca7e64e$var$container.querySelectorAll(\".field-cell\");\n    fieldCells.forEach((fieldCell, index)=>{\n        const classList = fieldCell.classList;\n        const classArray = classList;\n        for (const className of classArray)if (className !== \"field-cell\") {\n            classList.remove(className);\n            fieldCell.textContent = \"\";\n        }\n        if (gameState[index] !== 0) {\n            fieldCell.classList.add(`field-cell--${gameState[index]}`);\n            fieldCell.textContent = gameState[index];\n        }\n    });\n    $09e991522ca7e64e$var$scoreInfo.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n}\n\n\n//# sourceMappingURL=index.4ba2581c.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst container = document.querySelector('.container');\nconst button = container.querySelector('.button');\nconst messageStart = container.querySelector('.message-start');\nconst messageLose = container.querySelector('.message-lose');\nconst messageWin = container.querySelector('.message-win');\nconst scoreInfo = container.querySelector('.game-score');\n\nbutton.addEventListener('click', () => {\n  if (button.textContent === 'Start') {\n    game.start();\n\n    button.textContent = 'Restart';\n    button.classList.add('restart');\n    button.classList.remove('start');\n  } else {\n    game.restart();\n  }\n\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  updateUI();\n});\n\ndocument.addEventListener('keydown', (keyboard) => {\n  switch (keyboard.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    default:\n      break;\n  }\n\n  updateUI();\n});\n\nfunction updateUI() {\n  const gameState = game.getState().flat();\n  const fieldCells = container.querySelectorAll('.field-cell');\n\n  fieldCells.forEach((fieldCell, index) => {\n    const classList = fieldCell.classList;\n    const classArray = classList;\n\n    for (const className of classArray) {\n      if (className !== 'field-cell') {\n        classList.remove(className);\n        fieldCell.textContent = '';\n      }\n    }\n\n    if (gameState[index] !== 0) {\n      fieldCell.classList.add(`field-cell--${gameState[index]}`);\n      fieldCell.textContent = gameState[index];\n    }\n  });\n\n  scoreInfo.textContent = game.getScore();\n\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  } else if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n}\n","'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.initialState = initialState;\n\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.boardScore = 0;\n    this.currentStatus = 'idle';\n    this.isAbleToMove = true;\n    this.isGameActive = false;\n    this.isGameWon = false;\n    this.isGameLost = false;\n  }\n\n  moveLeft() {\n    if (this.isGameActive) {\n      this.moveTo('left');\n    }\n  }\n  moveRight() {\n    if (this.isGameActive) {\n      this.moveTo('right');\n    }\n  }\n  moveUp() {\n    if (this.isGameActive) {\n      this.moveTo('up');\n    }\n  }\n  moveDown() {\n    if (this.isGameActive) {\n      this.moveTo('down');\n    }\n  }\n\n  getScore() {\n    return this.boardScore;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    switch (true) {\n      case this.isGameWon:\n        this.currentStatus = 'win';\n        break;\n      case this.isGameLost:\n        this.currentStatus = 'lose';\n        break;\n      case this.isGameActive:\n        this.currentStatus = 'playing';\n        break;\n      default:\n        this.currentStatus = 'idle';\n        break;\n    }\n\n    return this.currentStatus;\n  }\n\n  start() {\n    this.isGameActive = true;\n    this.placeNewCell();\n    this.placeNewCell();\n  }\n\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.boardScore = 0;\n    this.isGameActive = true;\n    this.isGameWon = false;\n    this.isGameLost = false;\n\n    this.placeNewCell();\n    this.placeNewCell();\n  }\n\n  placeNewCell() {\n    let randomRow, randomColumn;\n\n    do {\n      randomRow = Math.floor(Math.random() * 4);\n      randomColumn = Math.floor(Math.random() * 4);\n    } while (this.board[randomRow][randomColumn] !== 0);\n\n    this.board[randomRow][randomColumn] = this.createCell();\n  }\n\n  createCell() {\n    const randomValue = Math.random();\n\n    return randomValue < 0.1 ? 4 : 2;\n  }\n\n  moveTo(direction) {\n    if (!this.isGameActive) {\n      return;\n    }\n\n    const numColumns = this.board[0].length;\n    let currentTable = JSON.parse(JSON.stringify(this.board));\n    let addScore = 0;\n\n    const transpose = (table) => {\n      return table[0].map((_, colIndex) => table.map((row) => row[colIndex]));\n    };\n\n    const reverseRow = (table) => {\n      return table.map((row) => row.slice().reverse());\n    };\n\n    const moveTable = (table) => {\n      const newTable = table.map((row) => {\n        let newRow = row.filter((num) => num !== 0);\n        const zerosToAdd = numColumns - newRow.length;\n\n        newRow = [...Array(zerosToAdd).fill(0), ...newRow];\n\n        for (let i = newRow.length; i >= 0; i--) {\n          if (newRow[i - 1] === newRow[i]) {\n            newRow[i - 1] *= 2;\n            newRow[i] = 0;\n            addScore += newRow[i - 1];\n            i--;\n          }\n        }\n\n        newRow = newRow.filter((num) => num !== 0);\n\n        const zerosToAddEnd = numColumns - newRow.length;\n\n        newRow = [...Array(zerosToAddEnd).fill(0), ...newRow];\n\n        return newRow;\n      });\n\n      return newTable;\n    };\n\n    const isGameOver = () => {\n      const GAME_FIELD = 4;\n\n      for (let i = 0; i < GAME_FIELD; i++) {\n        for (let j = 0; j < GAME_FIELD; j++) {\n          if (this.board[i][j] === 0) {\n            return false;\n          }\n        }\n      }\n\n      for (let i = 0; i < GAME_FIELD; i++) {\n        for (let j = 0; j < GAME_FIELD; j++) {\n          if (j < GAME_FIELD - 1 && this.board[i][j] === this.board[i][j + 1]) {\n            return false;\n          }\n\n          if (i < GAME_FIELD - 1 && this.board[i][j] === this.board[i + 1][j]) {\n            return false;\n          }\n        }\n      }\n\n      this.isGameActive = false;\n      this.isGameLost = true;\n\n      return true;\n    };\n\n    const makeMove = (moveToSide) => {\n      if (JSON.stringify(moveToSide) === JSON.stringify(currentTable)) {\n        return;\n      }\n\n      this.board = moveToSide;\n      currentTable = moveToSide;\n\n      if (this.board.flat().includes(2048)) {\n        this.isGameActive = false;\n        this.isGameWon = true;\n\n        this.getStatus();\n\n        return;\n      }\n\n      this.placeNewCell();\n\n      if (isGameOver()) {\n        this.isAbleToMove = false;\n      }\n    };\n\n    switch (direction) {\n      case 'up':\n        const moveUp = transpose(\n          reverseRow(moveTable(reverseRow(transpose(currentTable)))),\n        );\n\n        makeMove(moveUp);\n\n        this.boardScore += addScore;\n        break;\n\n      case 'down':\n        const moveDown = transpose(moveTable(transpose(currentTable)));\n\n        makeMove(moveDown);\n\n        this.boardScore += addScore;\n        break;\n\n      case 'right':\n        const moveRight = moveTable(currentTable);\n\n        makeMove(moveRight);\n\n        this.boardScore += addScore;\n        break;\n\n      case 'left':\n        const moveLeft = reverseRow(moveTable(reverseRow(currentTable)));\n\n        makeMove(moveLeft);\n\n        this.boardScore += addScore;\n        break;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","boardScore","currentStatus","isAbleToMove","isGameActive","isGameWon","isGameLost","moveLeft","moveTo","moveRight","moveUp","moveDown","getScore","getState","getStatus","start","placeNewCell","restart","randomRow","randomColumn","Math","floor","random","createCell","randomValue","direction","numColumns","length","currentTable","JSON","parse","stringify","addScore","transpose","table","map","_","colIndex","row","reverseRow","slice","reverse","moveTable","newRow","filter","num","Array","fill","i","isGameOver","j","GAME_FIELD","makeMove","moveToSide","flat","includes","$09e991522ca7e64e$var$container","document","querySelector","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$scoreInfo","$09e991522ca7e64e$var$updateUI","gameState","fieldCells","querySelectorAll","forEach","fieldCell","index","classList","className","remove","textContent","add","addEventListener","keyboard","key"],"version":3,"file":"index.4ba2581c.js.map"}